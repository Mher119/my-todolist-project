"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useTodos.ts":
/*!***************************!*\
  !*** ./hooks/useTodos.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useTodos)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nfunction useTodos() {\n    const [todos, setTodos] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isPending, startTransition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTodos.useEffect\": ()=>{\n            startTransition({\n                \"useTodos.useEffect\": async ()=>{\n                    try {\n                        const res = await fetch('/api/todos');\n                        if (!res.ok) throw new Error(\"Fetch failed: \".concat(res.status));\n                        const data = await res.json();\n                        setTodos(data);\n                    } catch (err) {\n                        console.error(err);\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useTodos.useEffect\"]);\n        }\n    }[\"useTodos.useEffect\"], []);\n    const [optimizedTodos, applyOptimistic] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useOptimistic)(todos, {\n        \"useTodos.useOptimistic\": (prev, newTodo)=>[\n                newTodo,\n                ...prev\n            ]\n    }[\"useTodos.useOptimistic\"]);\n    const addTodo = async (title)=>{\n        startTransition(async ()=>{\n            const temp = {\n                id: Date.now(),\n                title,\n                completed: false\n            };\n            applyOptimistic(temp);\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Add failed: \".concat(res.status));\n                const newTodo = await res.json();\n                setTodos((prev)=>[\n                        newTodo,\n                        ...prev.filter((t)=>t.id !== temp.id)\n                    ]);\n            } catch (err) {\n                console.error(err);\n                setTodos((prev)=>prev.filter((t)=>t.id !== temp.id));\n            }\n        });\n    };\n    const updateTodo = (id, title)=>{\n        startTransition(async ()=>{\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id,\n                        title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Update failed: \".concat(res.status));\n                const updated = await res.json();\n                setTodos((prev)=>prev.map((t)=>t.id === id ? updated : t));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    // 5. Փոխել completed դաշտը\n    const toggleTodo = (id, completed)=>{\n        startTransition(async ()=>{\n            try {\n                const todo = todos.find((t)=>t.id === id);\n                if (!todo) {\n                    console.error('❌ Todo not found!');\n                    return;\n                }\n                const res = await fetch('/api/todos', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id,\n                        completed,\n                        title: todo.title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Toggle failed: \".concat(res.status));\n                const updated = await res.json();\n                setTodos((prev)=>prev.map((t)=>t.id === id ? updated : t));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    // 6. Ջնջել Todo\n    const deleteTodo = (id)=>{\n        startTransition(async ()=>{\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id\n                    })\n                });\n                if (!res.ok) throw new Error(\"Delete failed \".concat(res.status));\n                setTodos((prev)=>prev.filter((t)=>t.id !== id));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    return {\n        // todos,\n        todos: optimizedTodos,\n        isPending,\n        loading,\n        addTodo,\n        updateTodo,\n        toggleTodo,\n        deleteTodo\n    };\n} // 'use client';\n // import { useEffect, useState, useTransition, useOptimistic } from \"react\";\n // type Todo = {id: number, title: string, completed: boolean};\n // export default function useTodos(){\n //     const [todos, setTodos] = useState<Todo[]>([]);\n //     const [loading, setLoading] = useState(true);\n //     const [isPending, start] = useTransition();\n //     useEffect(()=>{\n //         start( async()=>{\n //             try{\n //                 const res = await fetch('/api/todos');\n //                 if(!res.ok) throw new Error(`Fetch failed:  ${res.status}`);\n //                 const data = (await res.json()) as Todo[];\n //                 setTodos(data);\n //             }catch(err){\n //                 console.error(err)\n //             }finally{\n //                 setLoading(false);\n //             }\n //         });\n //     }, []);\n //     const [optimizedTodos, applyOptimistic] = useOptimistic(\n //         todos,\n //         (prev, newTodo: Todo) => [newTodo, ...prev]\n //     );\n //     const addTodo = async (title: string)=>{\n //         start(async()=>{\n //             const temp: Todo = {id: Date.now(), title, completed: false};\n //             applyOptimistic(temp);\n //             try{\n //                 await new Promise(resolve => setTimeout(resolve, 5000));\n //                 const res = await fetch('/api/todos', {\n //                     method: 'POST',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify(temp)\n //                 });\n //                 if(!res.ok) throw new Error(`Add failed:  ${res.status}`);\n //                 const newTodo = (await res.json()) as Todo;\n //                 setTodos(prev => [newTodo, ...prev.filter(t => t.id !== temp.id)])\n //             }catch(err){\n //                 console.error(err);\n //                 setTodos(prev => prev.filter(t=> t.id !== temp.id));\n //             }\n //         });\n //     };\n //     const updateTodo = (id:number, title: string)=>{\n //         start(async()=>{\n //             try{\n //                 const res = await fetch('/api/todos', {\n //                     method:'PUT',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify({id, title})\n //                 });\n //                 if(!res.ok) throw new Error(`Update failed: ${res.status}`);\n //                 const updated = (await res.json()) as Todo;\n //                 setTodos(prev => prev.map(t=> t.id === id ? updated: t));\n //             }catch(err){\n //                 console.error(err);\n //             }\n //         });\n //     };\n //     // const toggleTodo = (id: number, completed: boolean)=>{\n //     //         start(async()=>{\n //     //             try{\n //     //                 const res = await fetch('/api/todos', {\n //     //                     method: 'PUT',\n //     //                     headers: {'Content-Type': 'application/json'},\n //     //                     body: JSON.stringify({id, completed})\n //     //                 });\n //     //                 if(!res.ok) throw new Error(`Toggle failed: ${res.status}`)\n //     //                 const updated = (await res.json()) as Todo;\n //     //                 setTodos(prev => prev.map(t=> t.id === id ? updated : t));\n //     //             }catch(err){\n //     //                 console.error(err);\n //     //             }\n //     //         });\n //     // };\n //     const toggleTodo = (id: number, completed: boolean) => {\n //         start(async () => {\n //           try {\n //             const todo = todos.find(t => t.id === id); // Նույն ինֆոն վերցնում ես տեղական զանգվածից\n //             if (!todo) throw new Error('Todo not found');\n //             const res = await fetch('/api/todos', {\n //               method: 'PUT',\n //               headers: { 'Content-Type': 'application/json' },\n //               body: JSON.stringify({ id, completed, title: todo.title }) // ուղարկում ես նաև title-ը\n //             });\n //             if (!res.ok) throw new Error(`Toggle failed: ${res.status}`);\n //             const updated = (await res.json()) as Todo;\n //             setTodos(prev => prev.map(t => t.id === id ? updated : t));\n //           } catch (err) {\n //             console.error(err);\n //           }\n //         });\n //       };\n //     const deleteTodo = (id: number)=>{\n //         start(async()=>{\n //             try{\n //                 const res = await fetch('/api/todos', {\n //                     method: 'DELETE',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify({id})\n //                 });\n //                 if(!res.ok) throw new Error(`Delete failed ${res.status}`);\n //                 setTodos(prev => prev.filter(t=> t.id !== id));\n //             }catch(err){\n //                 console.error(err);\n //             }\n //         });\n //     };\n //     return {\n //         // todos, \n //         todos: optimizedTodos,\n //         isPending,\n //         loading, \n //         addTodo, \n //         updateTodo, \n //         toggleTodo, \n //         deleteTodo};\n // }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MUIsaUVBQWlFO0NBQ2pFLDRDQUE0QztDQUM1Qyw0RUFBNEU7Q0FDNUUsbUVBQW1FO0NBQ25FLDZCQUE2QjtDQUM3QixxRkFBcUY7Q0FDckYscUVBQXFFO0NBQ3JFLG9GQUFvRjtDQUVwRixrQ0FBa0M7Q0FDbEMsNkNBQTZDO0NBQzdDLHVCQUF1QjtDQUN2QixxQkFBcUI7Q0FFckIsWUFBWTtDQUVaLCtEQUErRDtDQUMvRCw4QkFBOEI7Q0FDOUIsa0JBQWtCO0NBQ2xCLHNHQUFzRztDQUN0Ryw0REFBNEQ7Q0FFNUQsc0RBQXNEO0NBQ3RELCtCQUErQjtDQUMvQixpRUFBaUU7Q0FDakUsdUdBQXVHO0NBQ3ZHLGtCQUFrQjtDQUVsQiw0RUFBNEU7Q0FDNUUsMERBQTBEO0NBRTFELDBFQUEwRTtDQUMxRSw0QkFBNEI7Q0FDNUIsa0NBQWtDO0NBQ2xDLGNBQWM7Q0FDZCxjQUFjO0NBQ2QsV0FBVztDQUlYLHlDQUF5QztDQUV6QywyQkFBMkI7Q0FDM0IsbUJBQW1CO0NBQ25CLDBEQUEwRDtDQUMxRCx3Q0FBd0M7Q0FDeEMscUVBQXFFO0NBQ3JFLGlEQUFpRDtDQUNqRCxzQkFBc0I7Q0FDdEIsOEVBQThFO0NBQzlFLGtFQUFrRTtDQUNsRSwyQkFBMkI7Q0FDM0Isc0NBQXNDO0NBQ3RDLGdCQUFnQjtDQUNoQixjQUFjO0NBRWQsU0FBUztDQUdULGVBQWU7Q0FDZixxQkFBcUI7Q0FDckIsaUNBQWlDO0NBQ2pDLHFCQUFxQjtDQUNyQixvQkFBb0I7Q0FDcEIsb0JBQW9CO0NBQ3BCLHVCQUF1QjtDQUN2Qix1QkFBdUI7Q0FDdkIsdUJBQXVCO0NBQ3ZCLElBQUkiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcTWhlclxcRGVza3RvcFxccmVhY3RcXFRvZG9MaXN0XFxob29rc1xcdXNlVG9kb3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnO1xuXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlLCB1c2VUcmFuc2l0aW9uLCB1c2VPcHRpbWlzdGljIH0gZnJvbSBcInJlYWN0XCI7XG5cbnR5cGUgVG9kbyA9IHtcbiAgaWQ6IG51bWJlcjtcbiAgdGl0bGU6IHN0cmluZztcbiAgY29tcGxldGVkOiBib29sZWFuO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVG9kb3MoKSB7XG4gIGNvbnN0IFt0b2Rvcywgc2V0VG9kb3NdID0gdXNlU3RhdGU8VG9kb1tdPihbXSk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbaXNQZW5kaW5nLCBzdGFydFRyYW5zaXRpb25dID0gdXNlVHJhbnNpdGlvbigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc3RhcnRUcmFuc2l0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCcvYXBpL3RvZG9zJyk7XG4gICAgICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYEZldGNoIGZhaWxlZDogJHtyZXMuc3RhdHVzfWApO1xuICAgICAgICBjb25zdCBkYXRhID0gKGF3YWl0IHJlcy5qc29uKCkpIGFzIFRvZG9bXTtcbiAgICAgICAgc2V0VG9kb3MoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBbb3B0aW1pemVkVG9kb3MsIGFwcGx5T3B0aW1pc3RpY10gPSB1c2VPcHRpbWlzdGljKFxuICAgIHRvZG9zLFxuICAgIChwcmV2LCBuZXdUb2RvOiBUb2RvKSA9PiBbbmV3VG9kbywgLi4ucHJldl1cbiAgKTtcblxuICBjb25zdCBhZGRUb2RvID0gYXN5bmMgKHRpdGxlOiBzdHJpbmcpID0+IHtcbiAgICBzdGFydFRyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcDogVG9kbyA9IHsgaWQ6IERhdGUubm93KCksIHRpdGxlLCBjb21wbGV0ZWQ6IGZhbHNlIH07XG4gICAgICBhcHBseU9wdGltaXN0aWModGVtcCk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCcvYXBpL3RvZG9zJywge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgdGl0bGUgfSksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKGBBZGQgZmFpbGVkOiAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgIGNvbnN0IG5ld1RvZG8gPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVG9kbztcbiAgICAgICAgc2V0VG9kb3MocHJldiA9PiBbbmV3VG9kbywgLi4ucHJldi5maWx0ZXIodCA9PiB0LmlkICE9PSB0ZW1wLmlkKV0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgc2V0VG9kb3MocHJldiA9PiBwcmV2LmZpbHRlcih0ID0+IHQuaWQgIT09IHRlbXAuaWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGVUb2RvID0gKGlkOiBudW1iZXIsIHRpdGxlOiBzdHJpbmcpID0+IHtcbiAgICBzdGFydFRyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4gICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlkLCB0aXRsZSB9KSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYFVwZGF0ZSBmYWlsZWQ6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZCA9IChhd2FpdCByZXMuanNvbigpKSBhcyBUb2RvO1xuICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IHByZXYubWFwKHQgPT4gKHQuaWQgPT09IGlkID8gdXBkYXRlZCA6IHQpKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8vIDUuINWT1bjVrdWl1awgY29tcGxldGVkINWk1aHVt9W/1ahcbiAgY29uc3QgdG9nZ2xlVG9kbyA9IChpZDogbnVtYmVyLCBjb21wbGV0ZWQ6IGJvb2xlYW4pID0+IHtcbiAgICBzdGFydFRyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdG9kbyA9IHRvZG9zLmZpbmQodCA9PiB0LmlkID09PSBpZCk7XG4gICAgICAgIGlmICghdG9kbykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBUb2RvIG5vdCBmb3VuZCEnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnL2FwaS90b2RvcycsIHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgaWQsIGNvbXBsZXRlZCwgdGl0bGU6IHRvZG8udGl0bGUgfSksIC8vINW61aHWgNW/1aHVpNWr1oAgdGl0bGVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYFRvZ2dsZSBmYWlsZWQ6ICR7cmVzLnN0YXR1c31gKTtcbiAgICAgICAgY29uc3QgdXBkYXRlZCA9IChhd2FpdCByZXMuanNvbigpKSBhcyBUb2RvO1xuICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IHByZXYubWFwKHQgPT4gKHQuaWQgPT09IGlkID8gdXBkYXRlZCA6IHQpKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8vIDYuINWL1bbVu9Wl1awgVG9kb1xuICBjb25zdCBkZWxldGVUb2RvID0gKGlkOiBudW1iZXIpID0+IHtcbiAgICBzdGFydFRyYW5zaXRpb24oYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4gICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlkIH0pLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihgRGVsZXRlIGZhaWxlZCAke3Jlcy5zdGF0dXN9YCk7XG4gICAgICAgIHNldFRvZG9zKHByZXYgPT4gcHJldi5maWx0ZXIodCA9PiB0LmlkICE9PSBpZCkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIC8vIHRvZG9zLFxuICAgIHRvZG9zOiBvcHRpbWl6ZWRUb2RvcyxcbiAgICBpc1BlbmRpbmcsXG4gICAgbG9hZGluZyxcbiAgICBhZGRUb2RvLFxuICAgIHVwZGF0ZVRvZG8sXG4gICAgdG9nZ2xlVG9kbyxcbiAgICBkZWxldGVUb2RvLFxuICB9O1xufVxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gJ3VzZSBjbGllbnQnO1xuXG5cbi8vIGltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVRyYW5zaXRpb24sIHVzZU9wdGltaXN0aWMgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gdHlwZSBUb2RvID0ge2lkOiBudW1iZXIsIHRpdGxlOiBzdHJpbmcsIGNvbXBsZXRlZDogYm9vbGVhbn07XG5cbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRvZG9zKCl7XG4vLyAgICAgY29uc3QgW3RvZG9zLCBzZXRUb2Rvc10gPSB1c2VTdGF0ZTxUb2RvW10+KFtdKTtcbi8vICAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbi8vICAgICBjb25zdCBbaXNQZW5kaW5nLCBzdGFydF0gPSB1c2VUcmFuc2l0aW9uKCk7XG5cbi8vICAgICB1c2VFZmZlY3QoKCk9Pntcbi8vICAgICAgICAgc3RhcnQoIGFzeW5jKCk9Pntcbi8vICAgICAgICAgICAgIHRyeXtcbi8vICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnL2FwaS90b2RvcycpO1xuLy8gICAgICAgICAgICAgICAgIGlmKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihgRmV0Y2ggZmFpbGVkOiAgJHtyZXMuc3RhdHVzfWApO1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVG9kb1tdO1xuLy8gICAgICAgICAgICAgICAgIHNldFRvZG9zKGRhdGEpO1xuLy8gICAgICAgICAgICAgfWNhdGNoKGVycil7XG4vLyAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4vLyAgICAgICAgICAgICB9ZmluYWxseXtcbi8vICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfSk7XG5cbi8vICAgICB9LCBbXSk7XG5cbiAgICBcblxuXG4vLyAgICAgY29uc3QgW29wdGltaXplZFRvZG9zLCBhcHBseU9wdGltaXN0aWNdID0gdXNlT3B0aW1pc3RpYyhcbi8vICAgICAgICAgdG9kb3MsXG4vLyAgICAgICAgIChwcmV2LCBuZXdUb2RvOiBUb2RvKSA9PiBbbmV3VG9kbywgLi4ucHJldl1cbi8vICAgICApO1xuXG5cbi8vICAgICBjb25zdCBhZGRUb2RvID0gYXN5bmMgKHRpdGxlOiBzdHJpbmcpPT57XG4vLyAgICAgICAgIHN0YXJ0KGFzeW5jKCk9Pntcbi8vICAgICAgICAgICAgIGNvbnN0IHRlbXA6IFRvZG8gPSB7aWQ6IERhdGUubm93KCksIHRpdGxlLCBjb21wbGV0ZWQ6IGZhbHNlfTtcbi8vICAgICAgICAgICAgIGFwcGx5T3B0aW1pc3RpYyh0ZW1wKTtcblxuLy8gICAgICAgICAgICAgdHJ5e1xuLy8gICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDAwKSk7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuLy8gICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sXG4vLyAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHRlbXApXG4vLyAgICAgICAgICAgICAgICAgfSk7XG4vLyAgICAgICAgICAgICAgICAgaWYoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKGBBZGQgZmFpbGVkOiAgJHtyZXMuc3RhdHVzfWApO1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RvZG8gPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVG9kbztcbi8vICAgICAgICAgICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IFtuZXdUb2RvLCAuLi5wcmV2LmZpbHRlcih0ID0+IHQuaWQgIT09IHRlbXAuaWQpXSlcbi8vICAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbi8vICAgICAgICAgICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IHByZXYuZmlsdGVyKHQ9PiB0LmlkICE9PSB0ZW1wLmlkKSk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0pO1xuXG4vLyAgICAgfTtcbiAgICBcblxuXG5cbi8vICAgICBjb25zdCB1cGRhdGVUb2RvID0gKGlkOm51bWJlciwgdGl0bGU6IHN0cmluZyk9PntcblxuLy8gICAgICAgICBzdGFydChhc3luYygpPT57XG5cbi8vICAgICAgICAgICAgIHRyeXtcbi8vICAgICAgICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnL2FwaS90b2RvcycsIHtcbi8vICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOidQVVQnLFxuLy8gICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sXG4vLyAgICAgICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtpZCwgdGl0bGV9KVxuLy8gICAgICAgICAgICAgICAgIH0pO1xuLy8gICAgICAgICAgICAgICAgIGlmKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihgVXBkYXRlIGZhaWxlZDogJHtyZXMuc3RhdHVzfWApO1xuLy8gICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVG9kbztcbi8vICAgICAgICAgICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IHByZXYubWFwKHQ9PiB0LmlkID09PSBpZCA/IHVwZGF0ZWQ6IHQpKTtcbi8vICAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuLy8gICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbi8vICAgICAgICAgICAgIH1cbiAgICBcblxuLy8gICAgICAgICB9KTtcblxuICAgICAgXG4vLyAgICAgfTtcblxuXG4vLyAgICAgLy8gY29uc3QgdG9nZ2xlVG9kbyA9IChpZDogbnVtYmVyLCBjb21wbGV0ZWQ6IGJvb2xlYW4pPT57XG5cbi8vICAgICAvLyAgICAgICAgIHN0YXJ0KGFzeW5jKCk9Pntcbi8vICAgICAvLyAgICAgICAgICAgICB0cnl7XG5cbi8vICAgICAvLyAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4vLyAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbid9LFxuLy8gICAgIC8vICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe2lkLCBjb21wbGV0ZWR9KVxuLy8gICAgIC8vICAgICAgICAgICAgICAgICB9KTtcbi8vICAgICAvLyAgICAgICAgICAgICAgICAgaWYoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKGBUb2dnbGUgZmFpbGVkOiAke3Jlcy5zdGF0dXN9YClcbi8vICAgICAvLyAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZCA9IChhd2FpdCByZXMuanNvbigpKSBhcyBUb2RvO1xuLy8gICAgIC8vICAgICAgICAgICAgICAgICBzZXRUb2RvcyhwcmV2ID0+IHByZXYubWFwKHQ9PiB0LmlkID09PSBpZCA/IHVwZGF0ZWQgOiB0KSk7XG4gICAgICAgIFxuLy8gICAgIC8vICAgICAgICAgICAgIH1jYXRjaChlcnIpe1xuLy8gICAgIC8vICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4vLyAgICAgLy8gICAgICAgICAgICAgfVxuLy8gICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgXG4vLyAgICAgLy8gfTtcblxuLy8gICAgIGNvbnN0IHRvZ2dsZVRvZG8gPSAoaWQ6IG51bWJlciwgY29tcGxldGVkOiBib29sZWFuKSA9PiB7XG4vLyAgICAgICAgIHN0YXJ0KGFzeW5jICgpID0+IHtcbi8vICAgICAgICAgICB0cnkge1xuLy8gICAgICAgICAgICAgY29uc3QgdG9kbyA9IHRvZG9zLmZpbmQodCA9PiB0LmlkID09PSBpZCk7IC8vINWG1bjWgtW11bYg1avVttaG1bjVtiDVvtWl1oDWgdW21bjWgtW0INWl1b0g1b/VpdWy1aHVr9Wh1bYg1abVodW21aPVvtWh1a7Vq9aBXG4vLyAgICAgICAgICAgICBpZiAoIXRvZG8pIHRocm93IG5ldyBFcnJvcignVG9kbyBub3QgZm91bmQnKTtcbiAgICAgIFxuLy8gICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4vLyAgICAgICAgICAgICAgIG1ldGhvZDogJ1BVVCcsXG4vLyAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuLy8gICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlkLCBjb21wbGV0ZWQsIHRpdGxlOiB0b2RvLnRpdGxlIH0pIC8vINW41oLVstWh1oDVr9W41oLVtCDVpdW9INW21aHWhyB0aXRsZS3VqFxuLy8gICAgICAgICAgICAgfSk7XG4gICAgICBcbi8vICAgICAgICAgICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYFRvZ2dsZSBmYWlsZWQ6ICR7cmVzLnN0YXR1c31gKTtcbi8vICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWQgPSAoYXdhaXQgcmVzLmpzb24oKSkgYXMgVG9kbztcbiAgICAgIFxuLy8gICAgICAgICAgICAgc2V0VG9kb3MocHJldiA9PiBwcmV2Lm1hcCh0ID0+IHQuaWQgPT09IGlkID8gdXBkYXRlZCA6IHQpKTtcbi8vICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbi8vICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH0pO1xuLy8gICAgICAgfTtcbiAgICAgIFxuXG5cbi8vICAgICBjb25zdCBkZWxldGVUb2RvID0gKGlkOiBudW1iZXIpPT57XG4gICAgICAgIFxuLy8gICAgICAgICBzdGFydChhc3luYygpPT57XG4vLyAgICAgICAgICAgICB0cnl7XG4vLyAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJy9hcGkvdG9kb3MnLCB7XG4vLyAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4vLyAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nfSxcbi8vICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe2lkfSlcbi8vICAgICAgICAgICAgICAgICB9KTtcbi8vICAgICAgICAgICAgICAgICBpZighcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYERlbGV0ZSBmYWlsZWQgJHtyZXMuc3RhdHVzfWApO1xuLy8gICAgICAgICAgICAgICAgIHNldFRvZG9zKHByZXYgPT4gcHJldi5maWx0ZXIodD0+IHQuaWQgIT09IGlkKSk7XG4vLyAgICAgICAgICAgICB9Y2F0Y2goZXJyKXtcbi8vICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0pO1xuICAgICBcbi8vICAgICB9O1xuXG5cbi8vICAgICByZXR1cm4ge1xuLy8gICAgICAgICAvLyB0b2RvcywgXG4vLyAgICAgICAgIHRvZG9zOiBvcHRpbWl6ZWRUb2Rvcyxcbi8vICAgICAgICAgaXNQZW5kaW5nLFxuLy8gICAgICAgICBsb2FkaW5nLCBcbi8vICAgICAgICAgYWRkVG9kbywgXG4vLyAgICAgICAgIHVwZGF0ZVRvZG8sIFxuLy8gICAgICAgICB0b2dnbGVUb2RvLCBcbi8vICAgICAgICAgZGVsZXRlVG9kb307XG4vLyB9XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuIl0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVN0YXRlIiwidXNlVHJhbnNpdGlvbiIsInVzZU9wdGltaXN0aWMiLCJ1c2VUb2RvcyIsInRvZG9zIiwic2V0VG9kb3MiLCJsb2FkaW5nIiwic2V0TG9hZGluZyIsImlzUGVuZGluZyIsInN0YXJ0VHJhbnNpdGlvbiIsInJlcyIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwib3B0aW1pemVkVG9kb3MiLCJhcHBseU9wdGltaXN0aWMiLCJwcmV2IiwibmV3VG9kbyIsImFkZFRvZG8iLCJ0aXRsZSIsInRlbXAiLCJpZCIsIkRhdGUiLCJub3ciLCJjb21wbGV0ZWQiLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaWx0ZXIiLCJ0IiwidXBkYXRlVG9kbyIsInVwZGF0ZWQiLCJtYXAiLCJ0b2dnbGVUb2RvIiwidG9kbyIsImZpbmQiLCJkZWxldGVUb2RvIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useTodos.ts\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useTodos.ts":
/*!***************************!*\
  !*** ./hooks/useTodos.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ useTodos)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nfunction useTodos() {\n    const [todos, setTodos] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isPending, startTransition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useTransition)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useTodos.useEffect\": ()=>{\n            startTransition({\n                \"useTodos.useEffect\": async ()=>{\n                    try {\n                        const res = await fetch('/api/todos');\n                        if (!res.ok) throw new Error(\"Fetch failed: \".concat(res.status));\n                        const data = await res.json();\n                        setTodos(data);\n                    } catch (err) {\n                        console.error(err);\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useTodos.useEffect\"]);\n        }\n    }[\"useTodos.useEffect\"], []);\n    const [optimizedTodos, applyOptimistic] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useOptimistic)(todos, {\n        \"useTodos.useOptimistic\": (prev, newTodo)=>[\n                newTodo,\n                ...prev\n            ]\n    }[\"useTodos.useOptimistic\"]);\n    // 3. Ավելացնել Todo\n    const addTodo = async (title)=>{\n        startTransition(async ()=>{\n            const temp = {\n                id: Date.now(),\n                title,\n                completed: false\n            };\n            applyOptimistic(temp);\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Add failed: \".concat(res.status));\n                const newTodo = await res.json();\n                setTodos((prev)=>[\n                        newTodo,\n                        ...prev.filter((t)=>t.id !== temp.id)\n                    ]);\n            } catch (err) {\n                console.error(err);\n                setTodos((prev)=>prev.filter((t)=>t.id !== temp.id));\n            }\n        });\n    };\n    // 4. Թարմացնել Todo-ի վերնագիրը\n    const updateTodo = (id, title)=>{\n        startTransition(async ()=>{\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id,\n                        title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Update failed: \".concat(res.status));\n                const updated = await res.json();\n                setTodos((prev)=>prev.map((t)=>t.id === id ? updated : t));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    // 5. Փոխել completed դաշտը\n    const toggleTodo = (id, completed)=>{\n        startTransition(async ()=>{\n            try {\n                const todo = todos.find((t)=>t.id === id);\n                if (!todo) {\n                    console.error('❌ Todo not found!');\n                    return;\n                }\n                const res = await fetch('/api/todos', {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id,\n                        completed,\n                        title: todo.title\n                    })\n                });\n                if (!res.ok) throw new Error(\"Toggle failed: \".concat(res.status));\n                const updated = await res.json();\n                setTodos((prev)=>prev.map((t)=>t.id === id ? updated : t));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    // 6. Ջնջել Todo\n    const deleteTodo = (id)=>{\n        startTransition(async ()=>{\n            try {\n                const res = await fetch('/api/todos', {\n                    method: 'DELETE',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        id\n                    })\n                });\n                if (!res.ok) throw new Error(\"Delete failed \".concat(res.status));\n                setTodos((prev)=>prev.filter((t)=>t.id !== id));\n            } catch (err) {\n                console.error(err);\n            }\n        });\n    };\n    return {\n        // todos,\n        todos: optimizedTodos,\n        isPending,\n        loading,\n        addTodo,\n        updateTodo,\n        toggleTodo,\n        deleteTodo\n    };\n} // 'use client';\n // import { useEffect, useState, useTransition, useOptimistic } from \"react\";\n // type Todo = {id: number, title: string, completed: boolean};\n // export default function useTodos(){\n //     const [todos, setTodos] = useState<Todo[]>([]);\n //     const [loading, setLoading] = useState(true);\n //     const [isPending, start] = useTransition();\n //     useEffect(()=>{\n //         start( async()=>{\n //             try{\n //                 const res = await fetch('/api/todos');\n //                 if(!res.ok) throw new Error(`Fetch failed:  ${res.status}`);\n //                 const data = (await res.json()) as Todo[];\n //                 setTodos(data);\n //             }catch(err){\n //                 console.error(err)\n //             }finally{\n //                 setLoading(false);\n //             }\n //         });\n //     }, []);\n //     const [optimizedTodos, applyOptimistic] = useOptimistic(\n //         todos,\n //         (prev, newTodo: Todo) => [newTodo, ...prev]\n //     );\n //     const addTodo = async (title: string)=>{\n //         start(async()=>{\n //             const temp: Todo = {id: Date.now(), title, completed: false};\n //             applyOptimistic(temp);\n //             try{\n //                 await new Promise(resolve => setTimeout(resolve, 5000));\n //                 const res = await fetch('/api/todos', {\n //                     method: 'POST',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify(temp)\n //                 });\n //                 if(!res.ok) throw new Error(`Add failed:  ${res.status}`);\n //                 const newTodo = (await res.json()) as Todo;\n //                 setTodos(prev => [newTodo, ...prev.filter(t => t.id !== temp.id)])\n //             }catch(err){\n //                 console.error(err);\n //                 setTodos(prev => prev.filter(t=> t.id !== temp.id));\n //             }\n //         });\n //     };\n //     const updateTodo = (id:number, title: string)=>{\n //         start(async()=>{\n //             try{\n //                 const res = await fetch('/api/todos', {\n //                     method:'PUT',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify({id, title})\n //                 });\n //                 if(!res.ok) throw new Error(`Update failed: ${res.status}`);\n //                 const updated = (await res.json()) as Todo;\n //                 setTodos(prev => prev.map(t=> t.id === id ? updated: t));\n //             }catch(err){\n //                 console.error(err);\n //             }\n //         });\n //     };\n //     // const toggleTodo = (id: number, completed: boolean)=>{\n //     //         start(async()=>{\n //     //             try{\n //     //                 const res = await fetch('/api/todos', {\n //     //                     method: 'PUT',\n //     //                     headers: {'Content-Type': 'application/json'},\n //     //                     body: JSON.stringify({id, completed})\n //     //                 });\n //     //                 if(!res.ok) throw new Error(`Toggle failed: ${res.status}`)\n //     //                 const updated = (await res.json()) as Todo;\n //     //                 setTodos(prev => prev.map(t=> t.id === id ? updated : t));\n //     //             }catch(err){\n //     //                 console.error(err);\n //     //             }\n //     //         });\n //     // };\n //     const toggleTodo = (id: number, completed: boolean) => {\n //         start(async () => {\n //           try {\n //             const todo = todos.find(t => t.id === id); // Նույն ինֆոն վերցնում ես տեղական զանգվածից\n //             if (!todo) throw new Error('Todo not found');\n //             const res = await fetch('/api/todos', {\n //               method: 'PUT',\n //               headers: { 'Content-Type': 'application/json' },\n //               body: JSON.stringify({ id, completed, title: todo.title }) // ուղարկում ես նաև title-ը\n //             });\n //             if (!res.ok) throw new Error(`Toggle failed: ${res.status}`);\n //             const updated = (await res.json()) as Todo;\n //             setTodos(prev => prev.map(t => t.id === id ? updated : t));\n //           } catch (err) {\n //             console.error(err);\n //           }\n //         });\n //       };\n //     const deleteTodo = (id: number)=>{\n //         start(async()=>{\n //             try{\n //                 const res = await fetch('/api/todos', {\n //                     method: 'DELETE',\n //                     headers: {'Content-Type': 'application/json'},\n //                     body: JSON.stringify({id})\n //                 });\n //                 if(!res.ok) throw new Error(`Delete failed ${res.status}`);\n //                 setTodos(prev => prev.filter(t=> t.id !== id));\n //             }catch(err){\n //                 console.error(err);\n //             }\n //         });\n //     };\n //     return {\n //         // todos, \n //         todos: optimizedTodos,\n //         isPending,\n //         loading, \n //         addTodo, \n //         updateTodo, \n //         toggleTodo, \n //         deleteTodo};\n // }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useTodos.ts\n"));

/***/ })

});